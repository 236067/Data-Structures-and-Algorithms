public class Leetcode_641 {

    class MyCircularDeque {

        private int []mass;
        private int maxSize;
        private int front;
        private int rear;
        //构造函数,双端队列最大为 k 。
        public MyCircularDeque(int k) {
            mass=new int[k+1];
            maxSize=k+1;
            front=0;
            rear=0;
        }
        //将一个元素添加到双端队列头部。 如果操作成功返回 true ，否则返回 false 。
        public boolean insertFront(int value) {
            if(isFull()){
                return false;
            }
            front=(front-1+maxSize)%maxSize;
            mass[front]=value;
            return true;
        }
        //将一个元素添加到双端队列尾部。如果操作成功返回 true ，否则返回 false 。
        public boolean insertLast(int value) {
            if(isFull()){
                return false;
            }
            mass[rear]=value;
            rear=(rear+1)%maxSize;
            return true;
        }
        //从双端队列头部删除一个元素。 如果操作成功返回 true ，否则返回 false 。
        public boolean deleteFront() {
            if(isEmpty()){
                return false;
            }
            front=(front+1)%maxSize;
            return true;
        }
        //从双端队列尾部删除一个元素。如果操作成功返回 true ，否则返回 false 。
        public boolean deleteLast() {
            if(isEmpty()){
                return false;
            }
            rear=(rear-1+maxSize)%maxSize;
            return true;
        }
        //从双端队列头部获得一个元素。如果双端队列为空，返回 -1 。
        public int getFront() {
            if(isEmpty()){
                return -1;
            }
            return mass[front];
        }
        //获得双端队列的最后一个元素。 如果双端队列为空，返回 -1 。
        public int getRear() {
            if(isEmpty()){
                return -1;
            }
            return mass[(rear-1+maxSize)%maxSize];
        }
        //若双端队列为空，则返回 true ，否则返回 false  。
        public boolean isEmpty() {
            return rear==front;
        }
        //若双端队列满了，则返回 true ，否则返回 false 。

        public boolean isFull() {
            return (rear+1)%maxSize==front;
        }
    }

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */
}
